using System.Reflection;

namespace AutoBogus.Generators
{
  internal sealed class TypeGenerator<TType>
    : IAutoGenerator
  {
    object IAutoGenerator.Generate(AutoGenerateContext context)
    {
      object instance = null;

      // Only value types and non-abstract classes can be generated by this implementation
      var type = typeof(TType);
      var typeInfo = type.GetTypeInfo();

      if (typeInfo.IsValueType)
      {
        instance = CreateInstance(context);
      }
      
      if (typeInfo.IsClass && !typeInfo.IsAbstract)
      {
        instance = CreateInstance(context);
      }
      
      return instance;
    }

    private object CreateInstance(AutoGenerateContext context)
    {
      // Note that all instances are converted to object to cater for boxing and struct population
      // When setting a value via reflection on a struct a copy is made
      // This means the changes are applied to a different instance to the one created here
      object instance = context.Binder.CreateInstance<TType>(context);

      // Populate the generated instance
      context.Binder.PopulateInstance<TType>(instance, context);

      return instance;
    }
  }
}
